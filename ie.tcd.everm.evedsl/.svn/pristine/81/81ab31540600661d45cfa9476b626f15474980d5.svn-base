/*
* generated by Xtext
*/

package ie.tcd.everm.evedsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EveDescGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EventDescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventDesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cSequenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSequenceEventSeqParserRuleCall_3_0 = (RuleCall)cSequenceAssignment_3.eContents().get(0);
		private final Assignment cApiAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cApiAPIParserRuleCall_4_0 = (RuleCall)cApiAssignment_4.eContents().get(0);
		
		//EventDesc:
		//	"package" name=QualifiedName imports+=Import* sequence+=EventSeq* api+=API*;
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName imports+=Import* sequence+=EventSeq* api+=API*
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//sequence+=EventSeq*
		public Assignment getSequenceAssignment_3() { return cSequenceAssignment_3; }

		//EventSeq
		public RuleCall getSequenceEventSeqParserRuleCall_3_0() { return cSequenceEventSeqParserRuleCall_3_0; }

		//api+=API*
		public Assignment getApiAssignment_4() { return cApiAssignment_4; }

		//API
		public RuleCall getApiAPIParserRuleCall_4_0() { return cApiAPIParserRuleCall_4_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class HelperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Helper");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//Helper:
		//	"helper" name=ID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" ":"
		//	type=JvmTypeReference body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"helper" name=ID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" ":"
		//type=JvmTypeReference body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"helper"
		public Keyword getHelperKeyword_0() { return cHelperKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_3_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_6_0() { return cTypeJvmTypeReferenceParserRuleCall_6_0; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_7_0() { return cBodyXBlockExpressionParserRuleCall_7_0; }
	}

	public class EventSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHelperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHelperHelperParserRuleCall_3_0 = (RuleCall)cHelperAssignment_3.eContents().get(0);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEventEventParserRuleCall_4_0 = (RuleCall)cEventAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *Event Def starting here ------ * / EventSeq:
		//	"EventSequence" name=QualifiedName "{" helper+=Helper* event+=Event* "}";
		public ParserRule getRule() { return rule; }

		//"EventSequence" name=QualifiedName "{" helper+=Helper* event+=Event* "}"
		public Group getGroup() { return cGroup; }

		//"EventSequence"
		public Keyword getEventSequenceKeyword_0() { return cEventSequenceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//helper+=Helper*
		public Assignment getHelperAssignment_3() { return cHelperAssignment_3; }

		//Helper
		public RuleCall getHelperHelperParserRuleCall_3_0() { return cHelperHelperParserRuleCall_3_0; }

		//event+=Event*
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }

		//Event
		public RuleCall getEventEventParserRuleCall_4_0() { return cEventEventParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDecScopeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDecScopeDecScopeParserRuleCall_3_0 = (RuleCall)cDecScopeAssignment_3.eContents().get(0);
		private final Keyword cParseKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParserAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParserParserParserRuleCall_5_0 = (RuleCall)cParserAssignment_5.eContents().get(0);
		private final Keyword cPreKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cPreAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPreXExpressionParserRuleCall_8_0 = (RuleCall)cPreAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cPostKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPostAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPostXBlockExpressionParserRuleCall_11_0 = (RuleCall)cPostAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		/// *Event * / Event:
		//	"event" name=ID "{" decScope+=DecScope* "parse" parser=Parser "pre" "{" pre+=XExpression* "}" "post"
		//	post=XBlockExpression "}";
		public ParserRule getRule() { return rule; }

		//"event" name=ID "{" decScope+=DecScope* "parse" parser=Parser "pre" "{" pre+=XExpression* "}" "post"
		//post=XBlockExpression "}"
		public Group getGroup() { return cGroup; }

		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//decScope+=DecScope*
		public Assignment getDecScopeAssignment_3() { return cDecScopeAssignment_3; }

		//DecScope
		public RuleCall getDecScopeDecScopeParserRuleCall_3_0() { return cDecScopeDecScopeParserRuleCall_3_0; }

		//"parse"
		public Keyword getParseKeyword_4() { return cParseKeyword_4; }

		//parser=Parser
		public Assignment getParserAssignment_5() { return cParserAssignment_5; }

		//Parser
		public RuleCall getParserParserParserRuleCall_5_0() { return cParserParserParserRuleCall_5_0; }

		//"pre"
		public Keyword getPreKeyword_6() { return cPreKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//pre+=XExpression*
		public Assignment getPreAssignment_8() { return cPreAssignment_8; }

		//XExpression
		public RuleCall getPreXExpressionParserRuleCall_8_0() { return cPreXExpressionParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }

		//"post"
		public Keyword getPostKeyword_10() { return cPostKeyword_10; }

		//post=XBlockExpression
		public Assignment getPostAssignment_11() { return cPostAssignment_11; }

		//XBlockExpression
		public RuleCall getPostXBlockExpressionParserRuleCall_11_0() { return cPostXBlockExpressionParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ParserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parser");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextParserParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPlainParserParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDirectObjectParserParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *--Event->Parser* / Parser:
		//	TextParser | PlainParser | DirectObjectParser;
		public ParserRule getRule() { return rule; }

		//TextParser | PlainParser | DirectObjectParser
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextParser
		public RuleCall getTextParserParserRuleCall_0() { return cTextParserParserRuleCall_0; }

		//PlainParser
		public RuleCall getPlainParserParserRuleCall_1() { return cPlainParserParserRuleCall_1; }

		//DirectObjectParser
		public RuleCall getDirectObjectParserParserRuleCall_2() { return cDirectObjectParserParserRuleCall_2; }
	}

	public class TextParserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextParser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cByKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormatterAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormatterTextFormatterParserRuleCall_1_1_0 = (RuleCall)cFormatterAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIvarKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIvarAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIvarXVariableDeclarationParserRuleCall_3_1_0 = (RuleCall)cIvarAssignment_3_1.eContents().get(0);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueAbstractTextValueParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *--Event->TextParser * / TextParser:
		//	"text" ("by" formatter=TextFormatter)? "{" ("ivar" ivar+=XVariableDeclaration)? value+=AbstractTextValue* "}";
		public ParserRule getRule() { return rule; }

		//"text" ("by" formatter=TextFormatter)? "{" ("ivar" ivar+=XVariableDeclaration)? value+=AbstractTextValue* "}"
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//("by" formatter=TextFormatter)?
		public Group getGroup_1() { return cGroup_1; }

		//"by"
		public Keyword getByKeyword_1_0() { return cByKeyword_1_0; }

		//formatter=TextFormatter
		public Assignment getFormatterAssignment_1_1() { return cFormatterAssignment_1_1; }

		//TextFormatter
		public RuleCall getFormatterTextFormatterParserRuleCall_1_1_0() { return cFormatterTextFormatterParserRuleCall_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("ivar" ivar+=XVariableDeclaration)?
		public Group getGroup_3() { return cGroup_3; }

		//"ivar"
		public Keyword getIvarKeyword_3_0() { return cIvarKeyword_3_0; }

		//ivar+=XVariableDeclaration
		public Assignment getIvarAssignment_3_1() { return cIvarAssignment_3_1; }

		//XVariableDeclaration
		public RuleCall getIvarXVariableDeclarationParserRuleCall_3_1_0() { return cIvarXVariableDeclarationParserRuleCall_3_1_0; }

		//value+=AbstractTextValue*
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//AbstractTextValue
		public RuleCall getValueAbstractTextValueParserRuleCall_4_0() { return cValueAbstractTextValueParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TextFormatterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextFormatter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCSVFormatterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWordFormatterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSplitFormatterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cUserDefinedFormatterParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// *Event->TextParser->TextFormatter * / TextFormatter:
		//	CSVFormatter | WordFormatter | SplitFormatter | UserDefinedFormatter;
		public ParserRule getRule() { return rule; }

		//CSVFormatter | WordFormatter | SplitFormatter | UserDefinedFormatter
		public Alternatives getAlternatives() { return cAlternatives; }

		//CSVFormatter
		public RuleCall getCSVFormatterParserRuleCall_0() { return cCSVFormatterParserRuleCall_0; }

		//WordFormatter
		public RuleCall getWordFormatterParserRuleCall_1() { return cWordFormatterParserRuleCall_1; }

		//SplitFormatter
		public RuleCall getSplitFormatterParserRuleCall_2() { return cSplitFormatterParserRuleCall_2; }

		//UserDefinedFormatter
		public RuleCall getUserDefinedFormatterParserRuleCall_3() { return cUserDefinedFormatterParserRuleCall_3; }
	}

	public class CSVFormatterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CSVFormatter");
		private final Keyword cCsvKeyword = (Keyword)rule.eContents().get(1);
		
		/// *Event->TextParser->CSV * / CSVFormatter:
		//	"csv";
		public ParserRule getRule() { return rule; }

		//"csv"
		public Keyword getCsvKeyword() { return cCsvKeyword; }
	}

	public class WordFormatterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordFormatter");
		private final Assignment cWhiteAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cWhiteWordKeyword_0 = (Keyword)cWhiteAssignment.eContents().get(0);
		
		//WordFormatter:
		//	white?="word";
		public ParserRule getRule() { return rule; }

		//white?="word"
		public Assignment getWhiteAssignment() { return cWhiteAssignment; }

		//"word"
		public Keyword getWhiteWordKeyword_0() { return cWhiteWordKeyword_0; }
	}

	public class SplitFormatterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SplitFormatter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSplitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSpliterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSpliterSTRINGTerminalRuleCall_2_0 = (RuleCall)cSpliterAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SplitFormatter:
		//	"split" "(" spliter=STRING ")";
		public ParserRule getRule() { return rule; }

		//"split" "(" spliter=STRING ")"
		public Group getGroup() { return cGroup; }

		//"split"
		public Keyword getSplitKeyword_0() { return cSplitKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//spliter=STRING
		public Assignment getSpliterAssignment_2() { return cSpliterAssignment_2; }

		//STRING
		public RuleCall getSpliterSTRINGTerminalRuleCall_2_0() { return cSpliterSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class UserDefinedFormatterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UserDefinedFormatter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExprKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprXExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//UserDefinedFormatter:
		//	"expr" "(" expr=XExpression ")";
		public ParserRule getRule() { return rule; }

		//"expr" "(" expr=XExpression ")"
		public Group getGroup() { return cGroup; }

		//"expr"
		public Keyword getExprKeyword_0() { return cExprKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expr=XExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//XExpression
		public RuleCall getExprXExpressionParserRuleCall_2_0() { return cExprXExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AbstractTextValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractTextValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIgnoreValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// *--Event->TextParser->AbstractTextValue * / AbstractTextValue:
		//	VarValue | ConstantText | IgnoreValue;
		public ParserRule getRule() { return rule; }

		//VarValue | ConstantText | IgnoreValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarValue
		public RuleCall getVarValueParserRuleCall_0() { return cVarValueParserRuleCall_0; }

		//ConstantText
		public RuleCall getConstantTextParserRuleCall_1() { return cConstantTextParserRuleCall_1; }

		//IgnoreValue
		public RuleCall getIgnoreValueParserRuleCall_2() { return cIgnoreValueParserRuleCall_2; }
	}

	public class VarValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVarValueVariableDescParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//VarValue:
		//	"[" variable=VarValueVariableDesc "]";
		public ParserRule getRule() { return rule; }

		//"[" variable=VarValueVariableDesc "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//variable=VarValueVariableDesc
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }

		//VarValueVariableDesc
		public RuleCall getVariableVarValueVariableDescParserRuleCall_1_0() { return cVariableVarValueVariableDescParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class VarValueVariableDescElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarValueVariableDesc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cWriteableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cWriteableColonKeyword_1_0 = (Keyword)cWriteableAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//VarValueVariableDesc returns xbase::XVariableDeclaration:
		//	name=ID writeable?=":" type=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//name=ID writeable?=":" type=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//writeable?=":"
		public Assignment getWriteableAssignment_1() { return cWriteableAssignment_1; }

		//":"
		public Keyword getWriteableColonKeyword_1_0() { return cWriteableColonKeyword_1_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0; }
	}

	public class ConstantTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantText");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//ConstantText:
		//	content=STRING;
		public ParserRule getRule() { return rule; }

		//content=STRING
		public Assignment getContentAssignment() { return cContentAssignment; }

		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_0() { return cContentSTRINGTerminalRuleCall_0; }
	}

	public class IgnoreValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IgnoreValue");
		private final Assignment cIgnoreAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIgnoreIgnoreKeyword_0 = (Keyword)cIgnoreAssignment.eContents().get(0);
		
		//IgnoreValue:
		//	ignore?="Ignore";
		public ParserRule getRule() { return rule; }

		//ignore?="Ignore"
		public Assignment getIgnoreAssignment() { return cIgnoreAssignment; }

		//"Ignore"
		public Keyword getIgnoreIgnoreKeyword_0() { return cIgnoreIgnoreKeyword_0; }
	}

	public class PlainParserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlainParser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIvarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIvarAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIvarXVariableDeclarationParserRuleCall_2_1_0 = (RuleCall)cIvarAssignment_2_1.eContents().get(0);
		private final Keyword cLogicKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLogicAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLogicXBlockExpressionParserRuleCall_4_0 = (RuleCall)cLogicAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// *--Event->PlainParser * / PlainParser:
		//	"plain" "{" ("ivar" ivar+=XVariableDeclaration)* "logic" logic=XBlockExpression "}";
		public ParserRule getRule() { return rule; }

		//"plain" "{" ("ivar" ivar+=XVariableDeclaration)* "logic" logic=XBlockExpression "}"
		public Group getGroup() { return cGroup; }

		//"plain"
		public Keyword getPlainKeyword_0() { return cPlainKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("ivar" ivar+=XVariableDeclaration)*
		public Group getGroup_2() { return cGroup_2; }

		//"ivar"
		public Keyword getIvarKeyword_2_0() { return cIvarKeyword_2_0; }

		//ivar+=XVariableDeclaration
		public Assignment getIvarAssignment_2_1() { return cIvarAssignment_2_1; }

		//XVariableDeclaration
		public RuleCall getIvarXVariableDeclarationParserRuleCall_2_1_0() { return cIvarXVariableDeclarationParserRuleCall_2_1_0; }

		//"logic"
		public Keyword getLogicKeyword_3() { return cLogicKeyword_3; }

		//logic=XBlockExpression
		public Assignment getLogicAssignment_4() { return cLogicAssignment_4; }

		//XBlockExpression
		public RuleCall getLogicXBlockExpressionParserRuleCall_4_0() { return cLogicXBlockExpressionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DirectObjectParserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DirectObjectParser");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDirectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIvarKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIvarAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIvarXVariableDeclarationParserRuleCall_4_1_0 = (RuleCall)cIvarAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DirectObjectParser:
		//	"direct" "object" ":" type=JvmTypeReference ("ivar" ivar+=XVariableDeclaration)* ";";
		public ParserRule getRule() { return rule; }

		//"direct" "object" ":" type=JvmTypeReference ("ivar" ivar+=XVariableDeclaration)* ";"
		public Group getGroup() { return cGroup; }

		//"direct"
		public Keyword getDirectKeyword_0() { return cDirectKeyword_0; }

		//"object"
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }

		//("ivar" ivar+=XVariableDeclaration)*
		public Group getGroup_4() { return cGroup_4; }

		//"ivar"
		public Keyword getIvarKeyword_4_0() { return cIvarKeyword_4_0; }

		//ivar+=XVariableDeclaration
		public Assignment getIvarAssignment_4_1() { return cIvarAssignment_4_1; }

		//XVariableDeclaration
		public RuleCall getIvarXVariableDeclarationParserRuleCall_4_1_0() { return cIvarXVariableDeclarationParserRuleCall_4_1_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class DecScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecScope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarVariableDecParserRuleCall_0_0 = (RuleCall)cVarAssignment_0.eContents().get(0);
		private final Assignment cScopeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScopeScopeParserRuleCall_1_0 = (RuleCall)cScopeAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// *Event->DecScope * / DecScope:
		//	var=VariableDec scope=Scope? ";";
		public ParserRule getRule() { return rule; }

		//var=VariableDec scope=Scope? ";"
		public Group getGroup() { return cGroup; }

		//var=VariableDec
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//VariableDec
		public RuleCall getVarVariableDecParserRuleCall_0_0() { return cVarVariableDecParserRuleCall_0_0; }

		//scope=Scope?
		public Assignment getScopeAssignment_1() { return cScopeAssignment_1; }

		//Scope
		public RuleCall getScopeScopeParserRuleCall_1_0() { return cScopeScopeParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class VariableDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cWriteableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cWriteableColonKeyword_2_0 = (Keyword)cWriteableAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		/// *Event->DecScope->VariableDec* / VariableDec returns xbase::XVariableDeclaration:
		//	"var" name=ID writeable?=":" type=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"var" name=ID writeable?=":" type=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//writeable?=":"
		public Assignment getWriteableAssignment_2() { return cWriteableAssignment_2; }

		//":"
		public Keyword getWriteableColonKeyword_2_0() { return cWriteableColonKeyword_2_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class ScopeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scope");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprXMemberFeatureCallParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Assignment cEnforceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cEnforceEnforcedKeyword_2_0 = (Keyword)cEnforceAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRealtypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRealtypeJvmTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cRealtypeAssignment_3_1.eContents().get(0);
		
		/// *Event->DecScope->Scope* / Scope:
		//	"in" expr=XMemberFeatureCall enforce?="enforced"? ("as" realtype=JvmTypeReference)?;
		public ParserRule getRule() { return rule; }

		//"in" expr=XMemberFeatureCall enforce?="enforced"? ("as" realtype=JvmTypeReference)?
		public Group getGroup() { return cGroup; }

		//"in"
		public Keyword getInKeyword_0() { return cInKeyword_0; }

		//expr=XMemberFeatureCall
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//XMemberFeatureCall
		public RuleCall getExprXMemberFeatureCallParserRuleCall_1_0() { return cExprXMemberFeatureCallParserRuleCall_1_0; }

		//enforce?="enforced"?
		public Assignment getEnforceAssignment_2() { return cEnforceAssignment_2; }

		//"enforced"
		public Keyword getEnforceEnforcedKeyword_2_0() { return cEnforceEnforcedKeyword_2_0; }

		//("as" realtype=JvmTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"as"
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }

		//realtype=JvmTypeReference
		public Assignment getRealtypeAssignment_3_1() { return cRealtypeAssignment_3_1; }

		//JvmTypeReference
		public RuleCall getRealtypeJvmTypeReferenceParserRuleCall_3_1_0() { return cRealtypeJvmTypeReferenceParserRuleCall_3_1_0; }
	}

	public class APIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "API");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAPIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHelperAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHelperHelperParserRuleCall_3_0 = (RuleCall)cHelperAssignment_3.eContents().get(0);
		private final Assignment cMappingAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMappingMappingParserRuleCall_4_0 = (RuleCall)cMappingAssignment_4.eContents().get(0);
		private final Assignment cInvocationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cInvocationInvocationParserRuleCall_5_0 = (RuleCall)cInvocationAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// *----------Event Def ends here ------- * / / *----------API Def starts here-------- * / API:
		//	"API" name=QualifiedName "{" helper+=Helper* mapping+=Mapping* invocation+=Invocation* "}";
		public ParserRule getRule() { return rule; }

		//"API" name=QualifiedName "{" helper+=Helper* mapping+=Mapping* invocation+=Invocation* "}"
		public Group getGroup() { return cGroup; }

		//"API"
		public Keyword getAPIKeyword_0() { return cAPIKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//helper+=Helper*
		public Assignment getHelperAssignment_3() { return cHelperAssignment_3; }

		//Helper
		public RuleCall getHelperHelperParserRuleCall_3_0() { return cHelperHelperParserRuleCall_3_0; }

		//mapping+=Mapping*
		public Assignment getMappingAssignment_4() { return cMappingAssignment_4; }

		//Mapping
		public RuleCall getMappingMappingParserRuleCall_4_0() { return cMappingMappingParserRuleCall_4_0; }

		//invocation+=Invocation*
		public Assignment getInvocationAssignment_5() { return cInvocationAssignment_5; }

		//Invocation
		public RuleCall getInvocationInvocationParserRuleCall_5_0() { return cInvocationInvocationParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cMTypeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cSTypeAssignment_3.eContents().get(0);
		private final Assignment cUniqueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cUniqueUniqueKeyword_4_0 = (Keyword)cUniqueAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIdentifyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIdentifyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIdentifyXBlockExpressionParserRuleCall_6_1_0 = (RuleCall)cIdentifyAssignment_6_1.eContents().get(0);
		private final Assignment cSubTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSubTypeSubTypeParserRuleCall_7_0 = (RuleCall)cSubTypeAssignment_7.eContents().get(0);
		private final Keyword cNewImageKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cNewImageAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNewImageXBlockExpressionParserRuleCall_9_0 = (RuleCall)cNewImageAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Mapping:
		//	"mapping" mType=JvmTypeReference "=>" sType=JvmTypeReference unique?="unique"? "{" ("identify"
		//	identify=XBlockExpression)? subType+=SubType* "newImage" newImage=XBlockExpression "}";
		public ParserRule getRule() { return rule; }

		//"mapping" mType=JvmTypeReference "=>" sType=JvmTypeReference unique?="unique"? "{" ("identify"
		//identify=XBlockExpression)? subType+=SubType* "newImage" newImage=XBlockExpression "}"
		public Group getGroup() { return cGroup; }

		//"mapping"
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }

		//mType=JvmTypeReference
		public Assignment getMTypeAssignment_1() { return cMTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getMTypeJvmTypeReferenceParserRuleCall_1_0() { return cMTypeJvmTypeReferenceParserRuleCall_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }

		//sType=JvmTypeReference
		public Assignment getSTypeAssignment_3() { return cSTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getSTypeJvmTypeReferenceParserRuleCall_3_0() { return cSTypeJvmTypeReferenceParserRuleCall_3_0; }

		//unique?="unique"?
		public Assignment getUniqueAssignment_4() { return cUniqueAssignment_4; }

		//"unique"
		public Keyword getUniqueUniqueKeyword_4_0() { return cUniqueUniqueKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//("identify" identify=XBlockExpression)?
		public Group getGroup_6() { return cGroup_6; }

		//"identify"
		public Keyword getIdentifyKeyword_6_0() { return cIdentifyKeyword_6_0; }

		//identify=XBlockExpression
		public Assignment getIdentifyAssignment_6_1() { return cIdentifyAssignment_6_1; }

		//XBlockExpression
		public RuleCall getIdentifyXBlockExpressionParserRuleCall_6_1_0() { return cIdentifyXBlockExpressionParserRuleCall_6_1_0; }

		//subType+=SubType*
		public Assignment getSubTypeAssignment_7() { return cSubTypeAssignment_7; }

		//SubType
		public RuleCall getSubTypeSubTypeParserRuleCall_7_0() { return cSubTypeSubTypeParserRuleCall_7_0; }

		//"newImage"
		public Keyword getNewImageKeyword_8() { return cNewImageKeyword_8; }

		//newImage=XBlockExpression
		public Assignment getNewImageAssignment_9() { return cNewImageAssignment_9; }

		//XBlockExpression
		public RuleCall getNewImageXBlockExpressionParserRuleCall_9_0() { return cNewImageXBlockExpressionParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class SubTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cPreAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPreXBlockExpressionParserRuleCall_2_0 = (RuleCall)cPreAssignment_2.eContents().get(0);
		
		//SubType:
		//	"subType" type=JvmTypeReference pre=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"subType" type=JvmTypeReference pre=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"subType"
		public Keyword getSubTypeKeyword_0() { return cSubTypeKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//pre=XBlockExpression
		public Assignment getPreAssignment_2() { return cPreAssignment_2; }

		//XBlockExpression
		public RuleCall getPreXBlockExpressionParserRuleCall_2_0() { return cPreXBlockExpressionParserRuleCall_2_0; }
	}

	public class InvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariableVariableDecParserRuleCall_3_0 = (RuleCall)cVariableAssignment_3.eContents().get(0);
		private final Assignment cOperationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOperationOperationPointCutParserRuleCall_4_0 = (RuleCall)cOperationAssignment_4.eContents().get(0);
		private final Keyword cPreKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPreAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPreXBlockExpressionParserRuleCall_6_0 = (RuleCall)cPreAssignment_6.eContents().get(0);
		private final Keyword cInvokeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturningKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cRetTypeAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cRetTypeJvmTypeReferenceParserRuleCall_8_1_0 = (RuleCall)cRetTypeAssignment_8_1.eContents().get(0);
		private final Assignment cInvokeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cInvokeXBlockExpressionParserRuleCall_9_0 = (RuleCall)cInvokeAssignment_9.eContents().get(0);
		private final Keyword cPostKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cLeftParenthesisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cPostparaAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cPostparaJvmFormalParameterParserRuleCall_11_1_0 = (RuleCall)cPostparaAssignment_11_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cPostAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cPostXBlockExpressionParserRuleCall_12_0 = (RuleCall)cPostAssignment_12.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Invocation:
		//	"invocation" name=QualifiedName "{" variable+=VariableDec* operation+=OperationPointCut* "pre" pre=XBlockExpression
		//	"invoke" ("returning" retType=JvmTypeReference)? invoke=XBlockExpression "post" ("(" postpara=JvmFormalParameter ")")?
		//	post=XBlockExpression "}";
		public ParserRule getRule() { return rule; }

		//"invocation" name=QualifiedName "{" variable+=VariableDec* operation+=OperationPointCut* "pre" pre=XBlockExpression
		//"invoke" ("returning" retType=JvmTypeReference)? invoke=XBlockExpression "post" ("(" postpara=JvmFormalParameter ")")?
		//post=XBlockExpression "}"
		public Group getGroup() { return cGroup; }

		//"invocation"
		public Keyword getInvocationKeyword_0() { return cInvocationKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//variable+=VariableDec*
		public Assignment getVariableAssignment_3() { return cVariableAssignment_3; }

		//VariableDec
		public RuleCall getVariableVariableDecParserRuleCall_3_0() { return cVariableVariableDecParserRuleCall_3_0; }

		//operation+=OperationPointCut*
		public Assignment getOperationAssignment_4() { return cOperationAssignment_4; }

		//OperationPointCut
		public RuleCall getOperationOperationPointCutParserRuleCall_4_0() { return cOperationOperationPointCutParserRuleCall_4_0; }

		//"pre"
		public Keyword getPreKeyword_5() { return cPreKeyword_5; }

		//pre=XBlockExpression
		public Assignment getPreAssignment_6() { return cPreAssignment_6; }

		//XBlockExpression
		public RuleCall getPreXBlockExpressionParserRuleCall_6_0() { return cPreXBlockExpressionParserRuleCall_6_0; }

		//"invoke"
		public Keyword getInvokeKeyword_7() { return cInvokeKeyword_7; }

		//("returning" retType=JvmTypeReference)?
		public Group getGroup_8() { return cGroup_8; }

		//"returning"
		public Keyword getReturningKeyword_8_0() { return cReturningKeyword_8_0; }

		//retType=JvmTypeReference
		public Assignment getRetTypeAssignment_8_1() { return cRetTypeAssignment_8_1; }

		//JvmTypeReference
		public RuleCall getRetTypeJvmTypeReferenceParserRuleCall_8_1_0() { return cRetTypeJvmTypeReferenceParserRuleCall_8_1_0; }

		//invoke=XBlockExpression
		public Assignment getInvokeAssignment_9() { return cInvokeAssignment_9; }

		//XBlockExpression
		public RuleCall getInvokeXBlockExpressionParserRuleCall_9_0() { return cInvokeXBlockExpressionParserRuleCall_9_0; }

		//"post"
		public Keyword getPostKeyword_10() { return cPostKeyword_10; }

		//("(" postpara=JvmFormalParameter ")")?
		public Group getGroup_11() { return cGroup_11; }

		//"("
		public Keyword getLeftParenthesisKeyword_11_0() { return cLeftParenthesisKeyword_11_0; }

		//postpara=JvmFormalParameter
		public Assignment getPostparaAssignment_11_1() { return cPostparaAssignment_11_1; }

		//JvmFormalParameter
		public RuleCall getPostparaJvmFormalParameterParserRuleCall_11_1_0() { return cPostparaJvmFormalParameterParserRuleCall_11_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_2() { return cRightParenthesisKeyword_11_2; }

		//post=XBlockExpression
		public Assignment getPostAssignment_12() { return cPostAssignment_12; }

		//XBlockExpression
		public RuleCall getPostXBlockExpressionParserRuleCall_12_0() { return cPostXBlockExpressionParserRuleCall_12_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}

	public class OperationPointCutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationPointCut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpTypeOperationTypeEnumRuleCall_1_0 = (RuleCall)cOpTypeAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cElemTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cElemTypeJvmTypeReferenceParserRuleCall_2_0_0 = (RuleCall)cElemTypeAssignment_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFeatureAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFeatureIDTerminalRuleCall_4_0_0 = (RuleCall)cFeatureAssignment_4_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Assignment cPreAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPreXBlockExpressionParserRuleCall_5_0 = (RuleCall)cPreAssignment_5.eContents().get(0);
		
		//OperationPointCut:
		//	"operation" opType=OperationType (elemType=JvmTypeReference | "*") "->" (feature=ID | "*") pre=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"operation" opType=OperationType (elemType=JvmTypeReference | "*") "->" (feature=ID | "*") pre=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"operation"
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }

		//opType=OperationType
		public Assignment getOpTypeAssignment_1() { return cOpTypeAssignment_1; }

		//OperationType
		public RuleCall getOpTypeOperationTypeEnumRuleCall_1_0() { return cOpTypeOperationTypeEnumRuleCall_1_0; }

		//elemType=JvmTypeReference | "*"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//elemType=JvmTypeReference
		public Assignment getElemTypeAssignment_2_0() { return cElemTypeAssignment_2_0; }

		//JvmTypeReference
		public RuleCall getElemTypeJvmTypeReferenceParserRuleCall_2_0_0() { return cElemTypeJvmTypeReferenceParserRuleCall_2_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//feature=ID | "*"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//feature=ID
		public Assignment getFeatureAssignment_4_0() { return cFeatureAssignment_4_0; }

		//ID
		public RuleCall getFeatureIDTerminalRuleCall_4_0_0() { return cFeatureIDTerminalRuleCall_4_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_4_1() { return cAsteriskKeyword_4_1; }

		//pre=XBlockExpression
		public Assignment getPreAssignment_5() { return cPreAssignment_5; }

		//XBlockExpression
		public RuleCall getPreXBlockExpressionParserRuleCall_5_0() { return cPreXBlockExpressionParserRuleCall_5_0; }
	}
	
	
	public class OperationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OperationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cGetEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cGetGetKeyword_0_0 = (Keyword)cGetEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSetEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSetSetKeyword_1_0 = (Keyword)cSetEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAddAddKeyword_2_0 = (Keyword)cAddEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRemoveEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRemoveRemoveKeyword_3_0 = (Keyword)cRemoveEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCreateEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCreateCreateKeyword_4_0 = (Keyword)cCreateEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDestroyEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDestroyDestroyKeyword_5_0 = (Keyword)cDestroyEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum OperationType:
		//	get | set | add | remove | create | destroy;
		public EnumRule getRule() { return rule; }

		//get | set | add | remove | create | destroy
		public Alternatives getAlternatives() { return cAlternatives; }

		//get
		public EnumLiteralDeclaration getGetEnumLiteralDeclaration_0() { return cGetEnumLiteralDeclaration_0; }

		//"get"
		public Keyword getGetGetKeyword_0_0() { return cGetGetKeyword_0_0; }

		//set
		public EnumLiteralDeclaration getSetEnumLiteralDeclaration_1() { return cSetEnumLiteralDeclaration_1; }

		//"set"
		public Keyword getSetSetKeyword_1_0() { return cSetSetKeyword_1_0; }

		//add
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_2() { return cAddEnumLiteralDeclaration_2; }

		//"add"
		public Keyword getAddAddKeyword_2_0() { return cAddAddKeyword_2_0; }

		//remove
		public EnumLiteralDeclaration getRemoveEnumLiteralDeclaration_3() { return cRemoveEnumLiteralDeclaration_3; }

		//"remove"
		public Keyword getRemoveRemoveKeyword_3_0() { return cRemoveRemoveKeyword_3_0; }

		//create
		public EnumLiteralDeclaration getCreateEnumLiteralDeclaration_4() { return cCreateEnumLiteralDeclaration_4; }

		//"create"
		public Keyword getCreateCreateKeyword_4_0() { return cCreateCreateKeyword_4_0; }

		//destroy
		public EnumLiteralDeclaration getDestroyEnumLiteralDeclaration_5() { return cDestroyEnumLiteralDeclaration_5; }

		//"destroy"
		public Keyword getDestroyDestroyKeyword_5_0() { return cDestroyDestroyKeyword_5_0; }
	}
	
	private EventDescElements pEventDesc;
	private ImportElements pImport;
	private QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private HelperElements pHelper;
	private EventSeqElements pEventSeq;
	private EventElements pEvent;
	private ParserElements pParser;
	private TextParserElements pTextParser;
	private TextFormatterElements pTextFormatter;
	private CSVFormatterElements pCSVFormatter;
	private WordFormatterElements pWordFormatter;
	private SplitFormatterElements pSplitFormatter;
	private UserDefinedFormatterElements pUserDefinedFormatter;
	private AbstractTextValueElements pAbstractTextValue;
	private VarValueElements pVarValue;
	private VarValueVariableDescElements pVarValueVariableDesc;
	private ConstantTextElements pConstantText;
	private IgnoreValueElements pIgnoreValue;
	private PlainParserElements pPlainParser;
	private DirectObjectParserElements pDirectObjectParser;
	private DecScopeElements pDecScope;
	private VariableDecElements pVariableDec;
	private ScopeElements pScope;
	private APIElements pAPI;
	private MappingElements pMapping;
	private SubTypeElements pSubType;
	private InvocationElements pInvocation;
	private OperationPointCutElements pOperationPointCut;
	private OperationTypeElements unknownRuleOperationType;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public EveDescGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//EventDesc:
	//	"package" name=QualifiedName imports+=Import* sequence+=EventSeq* api+=API*;
	public EventDescElements getEventDescAccess() {
		return (pEventDesc != null) ? pEventDesc : (pEventDesc = new EventDescElements());
	}
	
	public ParserRule getEventDescRule() {
		return getEventDescAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildCard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return (pQualifiedNameWithWildCard != null) ? pQualifiedNameWithWildCard : (pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements());
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//Helper:
	//	"helper" name=ID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" ":"
	//	type=JvmTypeReference body=XBlockExpression;
	public HelperElements getHelperAccess() {
		return (pHelper != null) ? pHelper : (pHelper = new HelperElements());
	}
	
	public ParserRule getHelperRule() {
		return getHelperAccess().getRule();
	}

	/// *Event Def starting here ------ * / EventSeq:
	//	"EventSequence" name=QualifiedName "{" helper+=Helper* event+=Event* "}";
	public EventSeqElements getEventSeqAccess() {
		return (pEventSeq != null) ? pEventSeq : (pEventSeq = new EventSeqElements());
	}
	
	public ParserRule getEventSeqRule() {
		return getEventSeqAccess().getRule();
	}

	/// *Event * / Event:
	//	"event" name=ID "{" decScope+=DecScope* "parse" parser=Parser "pre" "{" pre+=XExpression* "}" "post"
	//	post=XBlockExpression "}";
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	/// *--Event->Parser* / Parser:
	//	TextParser | PlainParser | DirectObjectParser;
	public ParserElements getParserAccess() {
		return (pParser != null) ? pParser : (pParser = new ParserElements());
	}
	
	public ParserRule getParserRule() {
		return getParserAccess().getRule();
	}

	/// *--Event->TextParser * / TextParser:
	//	"text" ("by" formatter=TextFormatter)? "{" ("ivar" ivar+=XVariableDeclaration)? value+=AbstractTextValue* "}";
	public TextParserElements getTextParserAccess() {
		return (pTextParser != null) ? pTextParser : (pTextParser = new TextParserElements());
	}
	
	public ParserRule getTextParserRule() {
		return getTextParserAccess().getRule();
	}

	/// *Event->TextParser->TextFormatter * / TextFormatter:
	//	CSVFormatter | WordFormatter | SplitFormatter | UserDefinedFormatter;
	public TextFormatterElements getTextFormatterAccess() {
		return (pTextFormatter != null) ? pTextFormatter : (pTextFormatter = new TextFormatterElements());
	}
	
	public ParserRule getTextFormatterRule() {
		return getTextFormatterAccess().getRule();
	}

	/// *Event->TextParser->CSV * / CSVFormatter:
	//	"csv";
	public CSVFormatterElements getCSVFormatterAccess() {
		return (pCSVFormatter != null) ? pCSVFormatter : (pCSVFormatter = new CSVFormatterElements());
	}
	
	public ParserRule getCSVFormatterRule() {
		return getCSVFormatterAccess().getRule();
	}

	//WordFormatter:
	//	white?="word";
	public WordFormatterElements getWordFormatterAccess() {
		return (pWordFormatter != null) ? pWordFormatter : (pWordFormatter = new WordFormatterElements());
	}
	
	public ParserRule getWordFormatterRule() {
		return getWordFormatterAccess().getRule();
	}

	//SplitFormatter:
	//	"split" "(" spliter=STRING ")";
	public SplitFormatterElements getSplitFormatterAccess() {
		return (pSplitFormatter != null) ? pSplitFormatter : (pSplitFormatter = new SplitFormatterElements());
	}
	
	public ParserRule getSplitFormatterRule() {
		return getSplitFormatterAccess().getRule();
	}

	//UserDefinedFormatter:
	//	"expr" "(" expr=XExpression ")";
	public UserDefinedFormatterElements getUserDefinedFormatterAccess() {
		return (pUserDefinedFormatter != null) ? pUserDefinedFormatter : (pUserDefinedFormatter = new UserDefinedFormatterElements());
	}
	
	public ParserRule getUserDefinedFormatterRule() {
		return getUserDefinedFormatterAccess().getRule();
	}

	/// *--Event->TextParser->AbstractTextValue * / AbstractTextValue:
	//	VarValue | ConstantText | IgnoreValue;
	public AbstractTextValueElements getAbstractTextValueAccess() {
		return (pAbstractTextValue != null) ? pAbstractTextValue : (pAbstractTextValue = new AbstractTextValueElements());
	}
	
	public ParserRule getAbstractTextValueRule() {
		return getAbstractTextValueAccess().getRule();
	}

	//VarValue:
	//	"[" variable=VarValueVariableDesc "]";
	public VarValueElements getVarValueAccess() {
		return (pVarValue != null) ? pVarValue : (pVarValue = new VarValueElements());
	}
	
	public ParserRule getVarValueRule() {
		return getVarValueAccess().getRule();
	}

	//VarValueVariableDesc returns xbase::XVariableDeclaration:
	//	name=ID writeable?=":" type=JvmTypeReference;
	public VarValueVariableDescElements getVarValueVariableDescAccess() {
		return (pVarValueVariableDesc != null) ? pVarValueVariableDesc : (pVarValueVariableDesc = new VarValueVariableDescElements());
	}
	
	public ParserRule getVarValueVariableDescRule() {
		return getVarValueVariableDescAccess().getRule();
	}

	//ConstantText:
	//	content=STRING;
	public ConstantTextElements getConstantTextAccess() {
		return (pConstantText != null) ? pConstantText : (pConstantText = new ConstantTextElements());
	}
	
	public ParserRule getConstantTextRule() {
		return getConstantTextAccess().getRule();
	}

	//IgnoreValue:
	//	ignore?="Ignore";
	public IgnoreValueElements getIgnoreValueAccess() {
		return (pIgnoreValue != null) ? pIgnoreValue : (pIgnoreValue = new IgnoreValueElements());
	}
	
	public ParserRule getIgnoreValueRule() {
		return getIgnoreValueAccess().getRule();
	}

	/// *--Event->PlainParser * / PlainParser:
	//	"plain" "{" ("ivar" ivar+=XVariableDeclaration)* "logic" logic=XBlockExpression "}";
	public PlainParserElements getPlainParserAccess() {
		return (pPlainParser != null) ? pPlainParser : (pPlainParser = new PlainParserElements());
	}
	
	public ParserRule getPlainParserRule() {
		return getPlainParserAccess().getRule();
	}

	//DirectObjectParser:
	//	"direct" "object" ":" type=JvmTypeReference ("ivar" ivar+=XVariableDeclaration)* ";";
	public DirectObjectParserElements getDirectObjectParserAccess() {
		return (pDirectObjectParser != null) ? pDirectObjectParser : (pDirectObjectParser = new DirectObjectParserElements());
	}
	
	public ParserRule getDirectObjectParserRule() {
		return getDirectObjectParserAccess().getRule();
	}

	/// *Event->DecScope * / DecScope:
	//	var=VariableDec scope=Scope? ";";
	public DecScopeElements getDecScopeAccess() {
		return (pDecScope != null) ? pDecScope : (pDecScope = new DecScopeElements());
	}
	
	public ParserRule getDecScopeRule() {
		return getDecScopeAccess().getRule();
	}

	/// *Event->DecScope->VariableDec* / VariableDec returns xbase::XVariableDeclaration:
	//	"var" name=ID writeable?=":" type=JvmTypeReference;
	public VariableDecElements getVariableDecAccess() {
		return (pVariableDec != null) ? pVariableDec : (pVariableDec = new VariableDecElements());
	}
	
	public ParserRule getVariableDecRule() {
		return getVariableDecAccess().getRule();
	}

	/// *Event->DecScope->Scope* / Scope:
	//	"in" expr=XMemberFeatureCall enforce?="enforced"? ("as" realtype=JvmTypeReference)?;
	public ScopeElements getScopeAccess() {
		return (pScope != null) ? pScope : (pScope = new ScopeElements());
	}
	
	public ParserRule getScopeRule() {
		return getScopeAccess().getRule();
	}

	/// *----------Event Def ends here ------- * / / *----------API Def starts here-------- * / API:
	//	"API" name=QualifiedName "{" helper+=Helper* mapping+=Mapping* invocation+=Invocation* "}";
	public APIElements getAPIAccess() {
		return (pAPI != null) ? pAPI : (pAPI = new APIElements());
	}
	
	public ParserRule getAPIRule() {
		return getAPIAccess().getRule();
	}

	//Mapping:
	//	"mapping" mType=JvmTypeReference "=>" sType=JvmTypeReference unique?="unique"? "{" ("identify"
	//	identify=XBlockExpression)? subType+=SubType* "newImage" newImage=XBlockExpression "}";
	public MappingElements getMappingAccess() {
		return (pMapping != null) ? pMapping : (pMapping = new MappingElements());
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	//SubType:
	//	"subType" type=JvmTypeReference pre=XBlockExpression;
	public SubTypeElements getSubTypeAccess() {
		return (pSubType != null) ? pSubType : (pSubType = new SubTypeElements());
	}
	
	public ParserRule getSubTypeRule() {
		return getSubTypeAccess().getRule();
	}

	//Invocation:
	//	"invocation" name=QualifiedName "{" variable+=VariableDec* operation+=OperationPointCut* "pre" pre=XBlockExpression
	//	"invoke" ("returning" retType=JvmTypeReference)? invoke=XBlockExpression "post" ("(" postpara=JvmFormalParameter ")")?
	//	post=XBlockExpression "}";
	public InvocationElements getInvocationAccess() {
		return (pInvocation != null) ? pInvocation : (pInvocation = new InvocationElements());
	}
	
	public ParserRule getInvocationRule() {
		return getInvocationAccess().getRule();
	}

	//OperationPointCut:
	//	"operation" opType=OperationType (elemType=JvmTypeReference | "*") "->" (feature=ID | "*") pre=XBlockExpression;
	public OperationPointCutElements getOperationPointCutAccess() {
		return (pOperationPointCut != null) ? pOperationPointCut : (pOperationPointCut = new OperationPointCutElements());
	}
	
	public ParserRule getOperationPointCutRule() {
		return getOperationPointCutAccess().getRule();
	}

	//enum OperationType:
	//	get | set | add | remove | create | destroy;
	public OperationTypeElements getOperationTypeAccess() {
		return (unknownRuleOperationType != null) ? unknownRuleOperationType : (unknownRuleOperationType = new OperationTypeElements());
	}
	
	public EnumRule getOperationTypeRule() {
		return getOperationTypeAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? => memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" => ((declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" => (localVarName=ValidID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? => featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")" => arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbase.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
